package _36_Valid_Sudoku

import (
    "testing"
)

type testCase struct {
    tcase  [][]byte
    answer bool
}

var testCases = []testCase{
    {
        [][]byte{
            {'5', '3', '.', '.', '7', '.', '.', '.', '.',},
            {'6', '.', '.', '1', '9', '5', '.', '.', '.',},
            {'.', '9', '8', '.', '.', '.', '.', '6', '.',},
            {'8', '.', '.', '.', '6', '.', '.', '.', '3',},
            {'4', '.', '.', '8', '.', '3', '.', '.', '1',},
            {'7', '.', '.', '.', '2', '.', '.', '.', '6',},
            {'.', '6', '.', '.', '.', '.', '2', '8', '.',},
            {'.', '.', '.', '4', '1', '9', '.', '.', '5',},
            {'.', '.', '.', '.', '8', '.', '.', '7', '9',},
        }, true,
    },
    {
        [][]byte{
            {'8', '3', '.', '.', '7', '.', '.', '.', '.',},
            {'6', '.', '.', '1', '9', '5', '.', '.', '.',},
            {'.', '9', '8', '.', '.', '.', '.', '6', '.',},
            {'8', '.', '.', '.', '6', '.', '.', '.', '3',},
            {'4', '.', '.', '8', '.', '3', '.', '.', '1',},
            {'7', '.', '.', '.', '2', '.', '.', '.', '6',},
            {'.', '6', '.', '.', '.', '.', '2', '8', '.',},
            {'.', '.', '.', '4', '1', '9', '.', '.', '5',},
            {'.', '.', '.', '.', '8', '.', '.', '7', '9',},
        }, false,
    },
}

func TestSolution(t *testing.T) {
    for _, tc := range testCases {
        answer := isValidSudoku(tc.tcase)
        if answer != tc.answer {
            t.Errorf("expected: %v, got: %v", tc.answer, answer)
        }
    }
}
